
 -- Drop function F_GT7PS5Agreg_V2


create function F_GT7PS5Agreg_V2(vSessionID VARCHAR)
returns table(
 Session_ID     VARCHAR, -- Session from Session Table
 SessionTimeStamp   VARCHAR,  -- Recalculated varchar timestamp based on Session creation Date/Time
 SessionDate    VARCHAR,  -- Session creation Date
 SessionTime    TIME,  -- Session creation Time
 Car      INT,   -- Car ID
 
 LapCount     INT,
 RaceSecond     INT,
 RacePreciseTime_ms   INT,   -- Precise Race time (in millisecond) at second's start [SAVE FOR LAP'S END]
 
 Speed_kmh     REAL,   -- Average Speed during the second
 Gear      INT,   -- Gear mosly used during the second
 Distance_km    REAL,   -- Distance ran during the second
 LapPreciseTime_ms   INT,   -- Precise Lap time (in millisecond) at second's start [SAVE FOR LAP'S END]
 RacePosition    INT,   -- Get car ranking at second's end
 ThrottlePercent   DEC(3,2),  -- % of Throttle pressure during the second
 BrakePercent    DEC(3,2),  -- % of Brake pressure during the second
 ClutchDisengagePercent  DEC(3,2),  -- % Time of clutch disengage during the second 
 OffTrackPercent   DEC(3,2),  -- % Time off-track during the second
 HandbrakePercent   DEC(3,2),  -- % Time Handbrake use during the second
 ASMPercent     DEC(3,2),  -- % Time ASM activation during the second
 TCSPercent     DEC(3,2)  -- % Time TCS Activation during the second

) 
Language SQL
AS $$

-- Base CET: gather on same record all required data
With CET_Session as (
select
 ID as Session_ID,
 to_char(TO_TIMESTAMP( left(cast(createdat as varchar),19),'yyyy-MM-ddThh24:mi:ss'),'yyyyMMddThh24miss') as SessionTimeStamp,
 left(cast(CreatedAt as varchar),10) as SessionDate,
 cast(substr(cast(CreatedAt as varchar),12,8) as time) as SessionTime,
 Car_ID
From gt7_sessions
),

CET_Base as (
select
 -- Record Keys
 Session_ID, 
 PacketID,

 -- Num record to identify the first rows
 Row_number() over (partition by Session_ID order by PacketID asc) as RowNum,

 -- Get lapcount, previous and next position (to identify when start line is crossed)
 LapCount,
 Lead(LapCount,1,0)  over (partition by Session_ID order by PacketID asc) as LapCount_Next,
 Lag(LapCount,1,0)  over (partition by Session_ID order by PacketID asc) as LapCount_Prev,

 -- Chrono generated by API, to be corrected
 CurrentLapTime2,
 Lag(CurrentLapTime2,1,0) over (partition by Session_ID order by PacketID asc) as CurrentLapTime2_Prev,
 -- Get next record laptime to replace chrono (loose accuracy, but we get sure the last tick for the track has the right time)
 Lead(LastLapTime,1,0) over (partition by Session_ID order by PacketID asc) as LastLapTime_Next,

 -- tick at Previous speed to calculate distance to the actual tick
 lag(MetersPerSecond,1,0) over (partition by Session_ID order by PacketID asc) as MetersPerSecond_Prev,

 -- Determine rolling start time when game hold control
 TimeOfDayProgression,
 Lead(TimeOfDayProgression,1,0)over (partition by Session_ID order by PacketID asc) as TimeOfDayProgression_Next,
 Lag(TimeOfDayProgression,1,0) over (partition by Session_ID order by PacketID asc) as TimeOfDayProgression_Prev,

 -- Pedals and Gear
 throttle/255  as throttlePercent,
 brake/255   as BrakePercent,
 ClutchPedal  as ClutchDisengage,
 CurrentGear,
 -- Position
 preracestartpositionorqualipos as RacePosition,

 -- Additional informations
 lpad(to_bin(cast(flags as int)),12,'0') as flagsbin,
 cast(substring(lpad(to_bin(cast(flags as int)),12,'0') from 12 for 1) as int) as OnTrack,
 cast(substring(lpad(to_bin(cast(flags as int)),12,'0') from 06 for 1) as int) as Handbrake,
 cast(substring(lpad(to_bin(cast(flags as int)),12,'0') from 02 for 1) as int) as ASM,
 cast(substring(lpad(to_bin(cast(flags as int)),12,'0') from 01 for 1) as int) as TCS
 
 
 
from gt7_simulatorinterfacepackets
-- Restriction on session_id for Function
where Session_ID=vSessionID
order by Session_ID asc, PacketID asc
),

-- Get time used by game on Rolling Start (estimate)
CET_Launch as(
select 
 Session_ID,
 TimeOfDayProgression_Next - TimeOfDayProgression as LaunchTick
from CET_Base
-- calculated on row 2
where RowNum = 2
),

-- Determine tick duration (time between to record)
CET_Tick as (
select
 -- Record keys
 CET_Base.Session_ID as Session_ID,
 Rownum,
 LapCount, 
 LapCount_Next,
 LastLapTime_Next,
 CurrentLapTime2,
 CurrentLapTime2_Prev,
 LaunchTick,
 metersPerSecond_Prev,
 ThrottlePercent,
 BrakePercent,
 CurrentGear,
 RacePosition,
 ClutchDisengage,
 OnTrack,
 HandBrake,
 ASM,
 TCS,

 -- Tick duration from last Tick
 case 
  -- if 2nd record (Rolling Start), it's considered à 0 (Game start for lap 1)
  when RowNum=2 then 0
  -- if RowNum record (Driver hand-over), use of the absolute time différence (see CET_Launch)
  when rownum=3 then CET_Launch.LaunchTick
  -- if end of first lap, current time is replaced by laptime + launching time 
  when LapCount_Next>lapCount and LapCount=1
  then LastLapTime_Next- (CurrentLapTime2_Prev+CET_Launch.LaunchTick)
  -- if end of next laps, current time replaced by laptime (without launching time)
  when lapCount_Next>LapCount and lapCount>1
  then lastLapTime_Next- (CurrentLapTime2_Prev)
  -- At new lap, chronoi back to 0
  when LapCount_Prev<LapCount then 0
  -- standard case during laps, current chrono minus previous chrono
  else CurrentLapTime2-CurrentLapTime2_Prev
 end as Tick,

 -- Cumulative Sum to get corrected Lap Chrono
 sum(
  case
   when RowNum=2 then 0
   when RowNum=3 then CET_Launch.LaunchTick
   when LapCount_Next>LapCount and LapCount=1
   then LastLapTime_Next- (CurrentLapTime2_Prev+CET_Launch.LaunchTick)
   when LapCount_Next>LapCount and LapCount>1
   then LastLapTime_Next- (CurrentLapTime2_Prev)
   when LapCount_Prev<LapCount then 0
   else CurrentLapTime2-CurrentLapTime2_Prev
  end
  ) over (partition by CET_Base.Session_ID, LapCount order by Rownum) as CumulLap,
 -- Cumulative Sum to get corrected Race Chrono
 sum(
  case
   when RowNum=2 then 0
   when RowNum=3 then CET_Launch.LaunchTick
   when LapCount_Next>LapCount and LapCount=1
   then LastLapTime_Next- (CurrentLapTime2_Prev+CET_Launch.LaunchTick)
   when LapCount_Next>LapCount and LapCount>1
   then LastLapTime_Next- (CurrentLapTime2_Prev)
   when LapCount_Prev<LapCount then 0
   else CurrentLapTime2-CurrentLapTime2_Prev
  end
  ) over (partition by CET_Base.Session_ID order by RowNum) as CumulRace


from CET_Base inner join CET_Launch on CET_Base.Session_ID=CET_Launch.Session_ID

where
 -- Exclude first record (initialisation) and last record (holds data retrieved in CET_Base through LEAD() function)
  RowNum>1 
 and LapCount <=LapCount_Next
),

-- Convert values and prepare for aggregation
CET_Convert as (
select 
 *,
 MetersPerSecond_Prev/1000*Tick as Distance_m,
 (MetersPerSecond_Prev/1000*tick)/1000 as Distance_km,
 MetersPerSecond_Prev*3600/1000 as Speed_kmh,
 -- Get the second digit as aggregation reference
 floor(CumulRace/1000) as RaceSecond,
 -- num rows descending per lap and second to identify position at end of the second
 row_number() over (partition by LapCount, floor(CumulRace/1000)  order by RowNum desc) as LastRacePosition
 
from CET_tick
order by Session_ID, RowNum
),

-- Aggregate values per session/lap/second
CET_AggregLap as (
select
 Session_ID,
 LapCount,
 RaceSecond,
 
 Avg(Speed_kmh) as Speed_kmh,             -- Average Speed during the second
 Round(Avg(CurrentGear)) as Gear,            -- Gear mosly used during the second
 Sum(Distance_km) as Distance_km,            -- Distance ran during the second
 Max(CumulLap) as LapPreciseTime_ms,           -- Precise time (in millisecond) at second's start [SAVE FOR LAP'S END]
 Max(case when LastRacePosition = 1 then RacePosition end) as RacePosition,  -- Get car ranking at second's end
 cast(Avg(ThrottlePercent) as decimal(3,2)) as ThrottlePercent,     -- % of Throttle pressure during the second
 cast(Avg(BrakePercent) as decimal(3,2)) as BrakePercent,       -- % of Brake pressure during the second
 cast(Avg(ClutchDisengage) as dec(3,2)) as ClutchDisengagePercent,    -- % Time of clutch disengage during the second 
 cast(1-avg(OnTrack) as dec(3,2)) as OffTrackPercent,       -- % Time off-track during the second
 cast(avg(Handbrake) as dec(3,2)) as HandbrakePercent,       -- % Time Handbrake use during the second
 cast(Avg(ASM) as dec(3,2)) as ASMPercent,          -- % Time ASM activation during the second
 cast(Avg(TCS) as dec(3,2)) as TCSPercent          -- % Time TCS Activation during the second 
 
from CET_Convert
group by 
 Session_ID,
 LapCount,
 RaceSecond
),

-- Aggregate values per session/RACE/second
CET_AggregRace as (
select
 Session_ID,
 LapCount,
 RaceSecond,
 Max(CumulRace) as RacePreciseTime_ms -- Precise time (in millisecond) at second's start [SAVE FOR LAP'S END]
from CET_Convert
group by 
 Session_ID,
 LapCount,
 RaceSecond
),

-- Join aggregated data (Laps & Race)
CET_Aggreg as (
select 
 CET_AggregLap.*,
 CET_AggregRace.RacePreciseTime_ms
 
from CET_AggregLap
 inner join CET_AggregRace on 
   CET_AggregLap.Session_ID = CET_AggregRace.Session_ID
  and CET_AggregLap.LapCount = CET_AggregRace.LapCount
  and CET_AggregLap.RaceSecond = CET_AggregRace.RaceSecond
 
order by LapCount, RaceSecond
)

select
 CET_Session.Session_ID,
 CET_Session.SessionTimeStamp,
 CET_Session.SessionDate,
 CET_Session.SessionTime,
 CET_Session.Car_ID,
 
 CET_Aggreg.LapCount,
 CET_Aggreg.RaceSecond,
 CET_Aggreg.RacePreciseTime_ms,   
 
 CET_Aggreg.Speed_kmh,
 CET_Aggreg.Gear,
 CET_Aggreg.Distance_km,
 CET_Aggreg.LapPreciseTime_ms,
 CET_Aggreg.RacePosition,
 CET_Aggreg.ThrottlePercent,
 CET_Aggreg.BrakePercent,
 CET_Aggreg.ClutchDisengagePercent,
 CET_Aggreg.OffTrackPercent,
 CET_Aggreg.HandbrakePercent,
 CET_Aggreg.ASMPercent,
 CET_Aggreg.TCSPercent  

from CET_Aggreg
 inner join CET_session on
  CET_Aggreg.Session_ID = CET_Session.Session_ID

$$;
 